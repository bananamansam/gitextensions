TODO:

-Renamed items show as deleted/new in the commit dialog. It should be possible to detect renames there.

-Improve Visual Studio intergration

-I would love the ability to interactively stage / unstage individual hunks of a file diff.
+partly fixed, by allowing to start the command prompt with this command. Adding the 'real' function stays on the todo list, but i'm not sure how to do this yet.

-This is kind of a big one, but a radio button to switch from ‘change’ view to ‘tree’ view in the main window would be awesome!  I’m thinking of a tree control showing the repository as it’s currently checked out, with columns indicating the file status, most recent change (author, date and comment) for each file.  Context menus would allow viewing the history of the file, showing the blame results for the file , etc. 

-Another big one, have you seen Perforce’s “time lapse view”?  It’s a view of the file with “blame” markers on the left, a draggable timeline at the top and change details at the bottom.  Dragging the timeline left and forth allows you to “watch” the file change over time.

-The Stash changes dialog doesn’t resize properly.  The OK button tracks the size properly, but not the Abort, Keep dialog open, or Green Check controls.

-Is there a way to type in a message for a stash?  When I just created a stash using Stash all changes, the Message box was disabled.

FIXED:

-Command bar in Visual Studio is repositionized every time visual studio is started
+Fixed

-It would be nice if Git Extensions had an option to use the --ignore-space-at-eol option to git diff.  I’ve had issues with Git auto-converting my line endings and thus have had commits in which every file changed 100%.
+Fixed

-Add a feature to save window positions. At least the browse window position should be saved. Any other windows are centered anyway.
+Fixed

-Files types tagged as binary in .gitattributes are still displayed when selected in the file tree
 Simple to reproduce.
 1) Add a .gitattributes file to the root of your working directory.
 2) Add the following line to the .gitattributes file: *.[Ww][Aa][Vv] binary
 3) Add a .wav file to your working directory
 4) Commit your changes
 5) Select the .wav file in the file tree. "Garbage" is then displayed in the file contents window. 
    Diffs and Commits show the file  as binary and do not display the garbage.
+ Fixed

-Improve 'lost and found' dialog.
+Fixed

-Add warning when making a commit when not on a branch.
+fixed

-It would be awesome if the filter box could search filenames as well as commit messages.  For example, it would be nice to filter changelists that patch ‘unittests/heap.cpp’.  I think the git-gui search box even searches the patches…
+Hit ctrl-F or select advanced filter in context menu of revision graph

-The Browse window is the one I keep up most often.  The window title is ‘Browse <reponame> - Git Extensions’ .  When you have a lot of them open in the task bar the repository name gets truncated.  I think it would be best to just have the title be ‘<reponame> - Git Extensions’.
+Fixed

-Checkout revision context menu in the Browse list would be very cool.
+I added a messagebox with an 'are you sure' question.

-A Recent Repositories submenu in the File menu would be really useful.  I have a lot of repositories and it’s nice to be able to jump around quickly.
+fixed

-It would be nice to show the commit hash in the Commit tab (under Browse).  Right now I can’t find the commit hash anywhere in the UI. 
+fixed

-Close solve mergeconflicts dialog automaticly after all conflicts are solved
+fixed

-I often forget to stage any files when committing.  When I hit Ok the commit fails and I lose my commit message.  When you commit with no files, it would be nice to show a dialog telling you to stage at least one file, and then let you try again.  Also when a commit fails for any reason, it would be nice if the commit dialog came back with the staged files and comment preserved.
+Mostly solved

-Added git 1.6.3 to installer
+fixed

PUTTY
=====

It turned out that plink.exe (v 0.53b), contrary to what its usage output
says, doesn't use SSH protocol by default, instead, the protocol selected
depends on the "Default Settings" read from the registry. These settings
can be customized using putty.exe GUI.

Steps to reproduce:
1. Run putty.exe
2. Load "Default Settings" session (select it in the "Saved session"
listbox then click the "Load" button).
3. Change the "Protocol" radiobutton to something other than "SSH" (say,
"Telnet").
4. Click the "Save" button, exit the program.
5. Perform some action with git involving talking to a remote repository
via SSH, see it failing.

I think the problem can be solved in two ways:
1. When plink.exe is used, add the "-ssh" command line option to the list
of arguments to plink. The necessary framework exists as there is already a
workaround for its "-P" option.
2. Let the user choose how to invoke plink: allow GIT_SSH to contain also
arbitrary parameters to plink.exe, not just its path name, and make a note
about borked PuTTY behavior in a README file. This would allow the user to
have a non-SSH defaults in PuTTY's "Default Settings" and set his/her
GIT_SSH to something like
C:\path\to\plink.exe -ssh
or even
C:\path\to\plink.exe -load saved_session_name

You could also set the environment variable PLINK_PROTOCOL=ssh 